set.seed(123)  # For reproducibility
data <- rgamma(n = 100, shape = 1, rate = 2)  # Generate 100 samples
hist(data, main = "Gamma(1,2) Distribution", col = "lightblue", border = "black")
nsim = 475
n = c(20)
beta_true = c(0, 0.5)
eps_dist = c("normal", "gamma")
params = expand.grid(n = n,
n_sim = nsim,
beta_true = beta_true,
eps_dist = eps_dist)
View(params)
i=1
filename = paste0("scenario_", i, ".RDA")
load(here::here("data", filename))
View(results)
results[[1]]
# Function to extract biases from an RDA file
extract_bias <- function(file) {
load(file)  # Loads the object into the environment (assumed to be named 'results')
wald_bias <- sapply(results, function(x) x[1])  # Extract first element (Wald bias)
boot_bias <- sapply(results, function(x) x[2])  # Extract second element (Bootstrap bias)
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_bias)),
Bias = c(wald_bias, boot_bias)
)
}
# Load all scenarios
scenarios <- lapply(1:4, function(i) extract_bias(paste0("scenario_", i, ".rda")))
scenarios <- lapply(1:4, function(i) extract_bias(paste0("scenario_", i, ".RDA")))
# Function to extract biases from an RDA file
extract_bias <- function(file) {
load(here::here("data", file))
wald_bias <- sapply(results, function(x) x[1])
boot_bias <- sapply(results, function(x) x[2])
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_bias)),
Bias = c(wald_bias, boot_bias)
)
}
# Load all scenarios
scenarios <- lapply(1:4, function(i) extract_bias(paste0("scenario_", i, ".RDA")))
View(scenarios)
scenarios[[1]]
# Function to extract biases from an RDA file
extract_bias <- function(file) {
load(here::here("data", file))
wald_bias <- sapply(results, function(x) x[1])
boot_bias <- sapply(results, function(x) x[2])
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_bias)),
Bias = c(wald_bias, boot_bias)
)
}
# Load all scenarios
scenarios <- lapply(1:4, function(i) extract_bias(paste0("scenario_", i, ".RDA")))
bias_data <- do.call(rbind, Map(cbind, scenarios, Scenario = paste0("Scenario ", 1:4)))
View(bias_data)
# Compute means and MCSE
summary_data <- aggregate(Bias ~ Method + Scenario, data = bias_data, FUN = function(x) {
c(mean = mean(x), mcse = sd(x) / sqrt(length(x)))
})
View(summary_data)
# Convert list columns to separate columns
summary_data <- do.call(data.frame, summary_data)
colnames(summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot
ggplot(summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9), color = "red") +
labs(title = "Bias Comparison with Monte Carlo Standard Error",
y = "Bias", x = "Scenario") +
theme_minimal()
library(ggplot2)
# Convert list columns to separate columns
summary_data <- do.call(data.frame, summary_data)
colnames(summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot
ggplot(summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9), color = "red") +
labs(title = "Bias Comparison with Monte Carlo Standard Error",
y = "Bias", x = "Scenario") +
theme_minimal()
# Create the plot
ggplot(summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.5)) +
labs(title = "Bias Comparison with Monte Carlo Standard Error",
y = "Bias", x = "Scenario") +
theme_minimal()
# Create the plot
ggplot(summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.1, position = position_dodge(0.9)) +
labs(title = "Bias Comparison with Monte Carlo Standard Error",
y = "Bias", x = "Scenario") +
theme_minimal()
View(bias_data)
sd(bias_data[bias_data$Method=="Wald"& bias_data$Scenario =="Scenario 1",2])
sd(bias_data[bias_data$Method=="Wald"& bias_data$Scenario =="Scenario 3",2])
# Function to extract coverage from the RDA files
extract_coverage <- function(file) {
load(here::here("data", file))
wald_coverage <- sapply(results, function(x) x[5])
boot_coverage <- sapply(results, function(x) x[6])
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_coverage)),
Coverage = c(wald_coverage, boot_coverage)
)
}
# Load all scenarios for coverage
coverage_scenarios <- lapply(1:4, function(i) extract_coverage(paste0("scenario_", i, ".RDA")))
# Combine coverage data into a single dataframe
coverage_data <- do.call(rbind, Map(cbind, coverage_scenarios, Scenario = paste0("Scenario ", 1:4)))
# Compute means and MCSE for coverage
coverage_summary_data <- aggregate(Coverage ~ Method + Scenario, data = coverage_data, FUN = function(x) {
c(mean = mean(x), mcse = sd(x) / sqrt(length(x)))
})
# Convert list columns to separate columns
coverage_summary_data <- do.call(data.frame, coverage_summary_data)
colnames(coverage_summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot for coverage
ggplot(coverage_summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9), color = "red") +
labs(title = "Coverage Comparison with Monte Carlo Standard Error",
y = "Coverage", x = "Scenario") +
theme_minimal()
ggplot(coverage_summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Coverage Comparison with Monte Carlo Standard Error",
y = "Coverage", x = "Scenario") +
theme_minimal()
a = rgamma(n, shape = 1, rate = 2)
n
b = rnorm(n, 0, sd = sqrt(2))
sd(a)
sd(b)
# Function to extract coverage from the RDA files and compute Type I error
extract_type1_error_from_coverage <- function(file) {
load(file)  # Loads the object into the environment (assumed to be named 'results')
wald_coverage <- sapply(results, function(x) x[5])  # Extract fifth element (Wald coverage)
boot_coverage <- sapply(results, function(x) x[6])  # Extract sixth element (Bootstrap coverage)
# Compute Type I error as 1 - coverage
wald_type1_error <- 1 - wald_coverage
boot_type1_error <- 1 - boot_coverage
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_type1_error)),
Type1Error = c(wald_type1_error, boot_type1_error)
)
}
# Load only the scenarios under null hypothesis (Scenario 1 and Scenario 3)
type1_error_scenarios <- lapply(c(1, 3), function(i) extract_type1_error_from_coverage(paste0("scenario_", i, ".rda")))
# Function to extract coverage from the RDA files and compute Type I error
extract_type1_error_from_coverage <- function(file) {
load(here::here("data", file))
wald_coverage <- sapply(results, function(x) x[5])
boot_coverage <- sapply(results, function(x) x[6])
# Compute Type I error as 1 - coverage
wald_type1_error <- 1 - wald_coverage
boot_type1_error <- 1 - boot_coverage
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_type1_error)),
Type1Error = c(wald_type1_error, boot_type1_error)
)
}
# Load only the scenarios under null hypothesis (Scenario 1 and Scenario 3)
type1_error_scenarios <- lapply(c(1, 3), function(i) extract_type1_error_from_coverage(paste0("scenario_", i, ".RDA")))
# Combine Type I error data into a single dataframe
type1_error_data <- do.call(rbind, Map(cbind, type1_error_scenarios, Scenario = paste0("Scenario ", c(1, 3))))
# Compute means and MCSE for Type I error
type1_error_summary_data <- aggregate(Type1Error ~ Method + Scenario, data = type1_error_data, FUN = function(x) {
c(mean = mean(x), mcse = sd(x) / sqrt(length(x)))
})
# Convert list columns to separate columns
type1_error_summary_data <- do.call(data.frame, type1_error_summary_data)
colnames(type1_error_summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot for Type I error
ggplot(type1_error_summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Type I Error Comparison (Based on Coverage) with Monte Carlo Standard Error",
y = "Type I Error Rate", x = "Scenario") +
theme_minimal()
library(ggplot2)
# Function to extract biases from an RDA file
extract_bias <- function(file) {
load(here::here("data", file))
wald_bias <- sapply(results, function(x) x[1])
boot_bias <- sapply(results, function(x) x[2])
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_bias)),
Bias = c(wald_bias, boot_bias)
)
}
# Load all scenarios
scenarios <- lapply(1:4, function(i) extract_bias(paste0("scenario_", i, ".RDA")))
# Combine into a single dataframe
bias_data <- do.call(rbind, Map(cbind, scenarios, Scenario = paste0("Scenario ", 1:4)))
# Compute means and MCSE
summary_data <- aggregate(Bias ~ Method + Scenario, data = bias_data, FUN = function(x) {
c(mean = mean(x), mcse = sd(x) / sqrt(length(x)))
})
# Convert list columns to separate columns
summary_data <- do.call(data.frame, summary_data)
colnames(summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot
ggplot(summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Bias Comparison with Monte Carlo Standard Error",
y = "Bias", x = "Scenario") +
theme_minimal()
# Function to extract coverage from the RDA files
extract_coverage <- function(file) {
load(here::here("data", file))
wald_coverage <- sapply(results, function(x) x[5])
boot_coverage <- sapply(results, function(x) x[6])
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_coverage)),
Coverage = c(wald_coverage, boot_coverage)
)
}
# Load all scenarios for coverage
coverage_scenarios <- lapply(1:4, function(i) extract_coverage(paste0("scenario_", i, ".RDA")))
# Combine coverage data into a single dataframe
coverage_data <- do.call(rbind, Map(cbind, coverage_scenarios, Scenario = paste0("Scenario ", 1:4)))
# Compute means and MCSE for coverage
coverage_summary_data <- aggregate(Coverage ~ Method + Scenario, data = coverage_data, FUN = function(x) {
c(mean = mean(x), mcse = sd(x) / sqrt(length(x)))
})
# Convert list columns to separate columns
coverage_summary_data <- do.call(data.frame, coverage_summary_data)
colnames(coverage_summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot for coverage
ggplot(coverage_summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Coverage Comparison with Monte Carlo Standard Error",
y = "Coverage", x = "Scenario") +
theme_minimal()
library(ggplot2)
# Function to extract biases from an RDA file
extract_bias <- function(file) {
load(here::here("data", file))
wald_bias <- sapply(results, function(x) x[1])
boot_bias <- sapply(results, function(x) x[2])
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_bias)),
Bias = c(wald_bias, boot_bias)
)
}
# Load all scenarios
scenarios <- lapply(1:4, function(i) extract_bias(paste0("scenario_", i, ".RDA")))
# Combine into a single dataframe
bias_data <- do.call(rbind, Map(cbind, scenarios, Scenario = paste0("Scenario ", 1:4)))
# Compute means and MCSE
summary_data <- aggregate(Bias ~ Method + Scenario, data = bias_data, FUN = function(x) {
c(mean = mean(x), mcse = sd(x) / sqrt(length(x)))
})
# Convert list columns to separate columns
summary_data <- do.call(data.frame, summary_data)
colnames(summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot
ggplot(summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Bias Comparison with Monte Carlo Standard Error",
y = "Bias", x = "Scenario") +
theme_minimal()
# Function to extract coverage from the RDA files
extract_coverage <- function(file) {
load(here::here("data", file))
wald_coverage <- sapply(results, function(x) x[5])
boot_coverage <- sapply(results, function(x) x[6])
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_coverage)),
Coverage = c(wald_coverage, boot_coverage)
)
}
# Load all scenarios for coverage
coverage_scenarios <- lapply(1:4, function(i) extract_coverage(paste0("scenario_", i, ".RDA")))
# Combine coverage data into a single dataframe
coverage_data <- do.call(rbind, Map(cbind, coverage_scenarios, Scenario = paste0("Scenario ", 1:4)))
# Compute means and MCSE for coverage
coverage_summary_data <- aggregate(Coverage ~ Method + Scenario, data = coverage_data, FUN = function(x) {
c(mean = mean(x), mcse = sd(x) / sqrt(length(x)))
})
# Convert list columns to separate columns
coverage_summary_data <- do.call(data.frame, coverage_summary_data)
colnames(coverage_summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot for coverage
ggplot(coverage_summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Coverage Comparison with Monte Carlo Standard Error",
y = "Coverage", x = "Scenario") +
theme_minimal()
# Function to extract coverage from the RDA files and compute Type I error
extract_power_from_coverage <- function(file) {
load(here::here("data", file))
wald_coverage <- sapply(results, function(x) x[7])
boot_coverage <- sapply(results, function(x) x[8])
# Compute Type I error as 1 - coverage
wald_type1_error <-wald_coverage
boot_type1_error <-boot_coverage
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_type1_error)),
Power = c(wald_type1_error, boot_type1_error)
)
}
# Load only the scenarios under null hypothesis (Scenario 1 and Scenario 3)
power_scenarios <- lapply(c(2, 4), function(i) extract_power_from_coverage(paste0("scenario_", i, ".RDA")))
# Combine Type I error data into a single dataframe
power_data <- do.call(rbind, Map(cbind, power_scenarios, Scenario = paste0("Scenario ", c(2, 4))))
# Compute means and MCSE for Type I error
power_summary_data <- aggregate(Power ~ Method + Scenario, data = power_data, FUN = function(x) {
c(mean = mean(x), mcse = sd(x) / sqrt(length(x)))
})
# Convert list columns to separate columns
power_summary_data <- do.call(data.frame, power_summary_data)
colnames(power_summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot for Type I error
ggplot(power_summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Power Comparison (Based on Coverage of 0) with Monte Carlo Standard Error",
y = "Power Rate", x = "Scenario") +
theme_minimal()
# Function to extract coverage from the RDA files and compute Type I error
extract_type1_error_from_coverage <- function(file) {
load(here::here("data", file))
wald_coverage <- sapply(results, function(x) x[7])
boot_coverage <- sapply(results, function(x) x[8])
# Compute Type I error as 1 - coverage
wald_type1_error <- 1 - wald_coverage
boot_type1_error <- 1 - boot_coverage
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_type1_error)),
Type1Error = c(wald_type1_error, boot_type1_error)
)
}
# Load only the scenarios under null hypothesis (Scenario 1 and Scenario 3)
type1_error_scenarios <- lapply(c(1, 3), function(i) extract_type1_error_from_coverage(paste0("scenario_", i, ".RDA")))
# Combine Type I error data into a single dataframe
type1_error_data <- do.call(rbind, Map(cbind, type1_error_scenarios, Scenario = paste0("Scenario ", c(1, 3))))
# Compute means and MCSE for Type I error
type1_error_summary_data <- aggregate(Type1Error ~ Method + Scenario, data = type1_error_data, FUN = function(x) {
c(mean = mean(x), mcse = sd(x) / sqrt(length(x)))
})
# Convert list columns to separate columns
type1_error_summary_data <- do.call(data.frame, type1_error_summary_data)
colnames(type1_error_summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot for Type I error
ggplot(type1_error_summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Type I Error Comparison (Based on Coverage of 0) with Monte Carlo Standard Error",
y = "Type I Error Rate", x = "Scenario") +
theme_minimal()
library(ggplot2)
# Function to extract biases from an RDA file
extract_bias <- function(file) {
load(here::here("data", file))
wald_bias <- sapply(results, function(x) x[1])
boot_bias <- sapply(results, function(x) x[2])
data.frame(
Method = rep(c("Wald", "Bootstrap"), each = length(wald_bias)),
Bias = c(wald_bias, boot_bias)
)
}
# Load all scenarios
scenarios <- lapply(1:4, function(i) extract_bias(paste0("scenario_", i, ".RDA")))
# Combine into a single dataframe
bias_data <- do.call(rbind, Map(cbind, scenarios, Scenario = paste0("Scenario ", 1:4)))
# Compute means and MCSE
summary_data <- aggregate(Bias ~ Method + Scenario, data = bias_data, FUN = function(x) {
c(mean = mean(x), mcse = sd(x) / sqrt(length(x)))
})
# Convert list columns to separate columns
summary_data <- do.call(data.frame, summary_data)
colnames(summary_data) <- c("Method", "Scenario", "Mean", "MCSE")
# Create the plot
ggplot(summary_data, aes(x = Scenario, y = Mean, fill = Method)) +
geom_col(position = "dodge") +
geom_errorbar(aes(ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.9)) +
labs(title = "Bias Comparison with Monte Carlo Standard Error",
y = "Bias", x = "Scenario") +
theme_minimal()
ggplot(bias_data, aes(x = Scenario, y = Bias, fill = Method)) +
geom_boxplot(outlier.shape = NA, alpha = 0.5) +  # Box plot without outliers for clarity
stat_summary(aes(y = Bias), fun = mean, geom = "point", shape = 4, size = 3, color = "black") +  # Mean as an "X"
geom_errorbar(data = summary_data, aes(x = Scenario, y = Mean, ymin = Mean - MCSE, ymax = Mean + MCSE),
width = 0.2, position = position_dodge(0.75), color = "red") +  # MCSE error bars
labs(title = "Bias Comparison with Box Plot and Monte Carlo Standard Error",
y = "Bias", x = "Scenario") +
theme_minimal()
